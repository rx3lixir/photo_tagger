# Simple Photo Tagger Makefile - –†–£–°–°–ö–ê–Ø –í–ï–†–°–ò–Ø

.PHONY: help build up down logs clean test tag-image tag-dir check-tags

# –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
help:
	@echo "üöÄ Simple Photo Tagger (RUS) - –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
	@echo ""
	@echo "–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
	@echo "  build      - –°–æ–±—Ä–∞—Ç—å Docker –æ–±—Ä–∞–∑"
	@echo "  up         - –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã"
	@echo "  down       - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã"
	@echo "  logs       - –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
	@echo "  clean      - –û—á–∏—Å—Ç–∏—Ç—å Docker –æ–±—Ä–∞–∑—ã –∏ –¥–∞–Ω–Ω—ã–µ"
	@echo ""
	@echo "–¢—ç–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:"
	@echo "  tag-image  FILE=path   - –¢—ç–≥–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ñ–∞–π–ª"
	@echo "  tag-dir    DIR=path    - –¢—ç–≥–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –ø–∞–ø–∫—É"
	@echo "  search-tag TAG=—Ç—ç–≥     - –ü–æ–∏—Å–∫ –ø–æ —Ä—É—Å—Å–∫–æ–º—É —Ç—ç–≥—É"
	@echo ""
	@echo "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (—Ñ–∞–π–ª—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é):"
	@echo "  tag-image-test         - –¢–µ—Å—Ç —Ç—ç–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è test.jpg"
	@echo "  tag-dir-test           - –¢–µ—Å—Ç —Ç—ç–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è /app/photos"
	@echo "  check-tags             - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç—ç–≥–∏"
	@echo ""
	@echo "–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ë–î:"
	@echo "  db-check   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î"
	@echo "  db-stats   - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ AI —Ç—ç–≥–∞–º"
	@echo "  db-health  - –ó–¥–æ—Ä–æ–≤—å–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
	@echo ""
	@echo "–ü—Ä–∏–º–µ—Ä—ã —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:"
	@echo "  make tag-image FILE=/app/photos/dog.jpg"
	@echo "  make tag-dir DIR=/app/photos/vacation TAGS=3"
	@echo "  make search-tag TAG=—Å–æ–±–∞–∫–∞"
	@echo "  make get-tags FILE=/app/photos/cat.jpg"

# –°–æ–±—Ä–∞—Ç—å Docker –æ–±—Ä–∞–∑
build:
	@echo "üî® –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞..."
	docker-compose build

# –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã
up:
	@echo "üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..."
	docker-compose up -d
	@echo ""
	@echo "‚úÖ –°–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã!"
	@echo "üì° API: http://localhost:8000"
	@echo "üìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:8000/docs"
	@echo "üè∑Ô∏è  –†—É—Å—Å–∫–∏–µ —Ç—ç–≥–∏: http://localhost:8000/tags/available"
	@echo ""

# –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã
down:
	@echo "‚èπÔ∏è  –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
	docker-compose down

# –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏
logs:
	@echo "üìã –õ–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞):"
	docker-compose logs -f photo-tagger

# –õ–æ–≥–∏ –ë–î
logs-db:
	@echo "üìã –õ–æ–≥–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:"
	docker-compose logs postgres

# –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ
clean:
	@echo "üßπ –û—á–∏—Å—Ç–∫–∞ Docker..."
	docker-compose down -v
	docker system prune -f
	@echo "‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"

# –¢–µ—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
test:
	@echo "üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API..."
	@curl -s http://localhost:8000/health | python3 -m json.tool || echo "‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

# –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç—ç–≥–∏
check-tags:
	@echo "üè∑Ô∏è  –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä—É—Å—Å–∫–∏–µ —Ç—ç–≥–∏:"
	@curl -s http://localhost:8000/tags/available | python3 -c "import sys, json; data=json.load(sys.stdin); print('–í—Å–µ–≥–æ —Ç—ç–≥–æ–≤:', data['total_tags']); print('–ü—Ä–∏–º–µ—Ä—ã —Ç—ç–≥–æ–≤:'); [print(f'  {k} -> {v}') for k,v in list(data['sample_mapping'].items())]" 2>/dev/null || echo "‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

# –¢—ç–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: make tag-image FILE=/app/photos/dog.jpg)
tag-image:
	@if [ -z "$(FILE)" ]; then \
		echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: make tag-image FILE=/app/photos/your_image.jpg"; \
		echo "–ò–ª–∏ –¥–ª—è —Ç–µ—Å—Ç–∞: make tag-image-test"; \
		exit 1; \
	fi
	@echo "–¢—ç–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: $(FILE)"
	@curl -X POST "http://localhost:8000/tag/image" \
		-H "Content-Type: application/json" \
		-d '{"image_path": "$(FILE)", "top_k": $(or $(TAGS),5)}' \
		| python3 -c "import sys, json; data=json.load(sys.stdin); print('–§–∞–π–ª:', data.get('image_path', '')); print('–¢—ç–≥–∏:', ', '.join(data.get('russian_tags', []))); print('–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã:', [f'{s:.3f}' for s in data.get('confidence_scores', [])]); print('–û—à–∏–±–∫–∞:', data.get('error', '–Ω–µ—Ç'))" 2>/dev/null || echo "–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API"

# –¢—ç–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: make tag-dir DIR=/app/photos/vacation)
tag-dir:
	@if [ -z "$(DIR)" ]; then \
		echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: make tag-dir DIR=/app/photos/your_folder"; \
		echo "–ò–ª–∏ –¥–ª—è —Ç–µ—Å—Ç–∞: make tag-dir-test"; \
		exit 1; \
	fi
	@echo "–¢—ç–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏: $(DIR)"
	@curl -X POST "http://localhost:8000/tag/directory" \
		-H "Content-Type: application/json" \
		-d '{"directory_path": "$(DIR)", "top_k": $(or $(TAGS),5)}' \
		| python3 -c "import sys, json; data=json.load(sys.stdin); print('–ó–∞–ø—É—â–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞:', data.get('message', '')); print('–ü–∞–ø–∫–∞:', data.get('directory', '')); print('–§–∞–π–ª–æ–≤ –Ω–∞–π–¥–µ–Ω–æ:', data.get('files_count', 0))" 2>/dev/null || echo "–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API"

# –¢–µ—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã (–∏—Å–ø–æ–ª—å–∑—É—é—Ç —Ñ–∞–π–ª—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
tag-image-test:
	@echo "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—ç–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è..."
	@echo "–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ /app/photos"
	@curl -X POST "http://localhost:8000/tag/image" \
		-H "Content-Type: application/json" \
		-d '{"image_path": "/app/photos/test.jpg", "top_k": 5}' \
		| python3 -c "import sys, json; data=json.load(sys.stdin); print('–§–∞–π–ª:', data.get('image_path', '')); print('–¢—ç–≥–∏:', ', '.join(data.get('russian_tags', []))); print('–û—à–∏–±–∫–∞:', data.get('error', '–Ω–µ—Ç'))" 2>/dev/null || echo "–û—à–∏–±–∫–∞: —É–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ API –∑–∞–ø—É—â–µ–Ω –∏ —Ñ–∞–π–ª /app/photos/test.jpg —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"

tag-dir-test:
	@echo "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—ç–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–ø–∫–∏..."
	@curl -X POST "http://localhost:8000/tag/directory" \
		-H "Content-Type: application/json" \
		-d '{"directory_path": "/app/photos", "top_k": 5}' \
		| python3 -c "import sys, json; data=json.load(sys.stdin); print('–†–µ–∑—É–ª—å—Ç–∞—Ç:', data.get('message', '')); print('–§–∞–π–ª–æ–≤:', data.get('files_count', 0))" 2>/dev/null || echo "–û—à–∏–±–∫–∞: —É–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ API –∑–∞–ø—É—â–µ–Ω –∏ –ø–∞–ø–∫–∞ /app/photos –¥–æ—Å—Ç—É–ø–Ω–∞"

# –ü–æ–∏—Å–∫ –ø–æ —Ç—ç–≥—É (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: make search-tag TAG=—Å–æ–±–∞–∫–∞)
search-tag:
	@if [ -z "$(TAG)" ]; then \
		echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: make search-tag TAG=–≤–∞—à_—Ç—ç–≥"; \
		echo "–ü—Ä–∏–º–µ—Ä—ã: make search-tag TAG=—Å–æ–±–∞–∫–∞"; \
		echo "         make search-tag TAG=–ø–µ–π–∑–∞–∂"; \
		exit 1; \
	fi
	@echo "–ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ —Ç—ç–≥—É: $(TAG)"
	@curl -s "http://localhost:8000/search/$(TAG)" \
		| python3 -c "import sys, json; data=json.load(sys.stdin); print(f'–ù–∞–π–¥–µ–Ω–æ: {data[\"found\"]} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π'); [print(f'  {img[\"image_path\"]}') for img in data[\"images\"][:10]]" 2>/dev/null || echo "–¢—ç–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
get-tags:
	@if [ -z "$(FILE)" ]; then \
		echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: make get-tags FILE=/app/photos/your_image.jpg"; \
		exit 1; \
	fi
	@echo "–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—ç–≥–æ–≤ –¥–ª—è: $(FILE)"
	@curl -s "http://localhost:8000/image/$(FILE)/tags" \
		| python3 -c "import sys, json; data=json.load(sys.stdin); print('–§–∞–π–ª:', data.get('image_path', '')); print('–ù–∞–π–¥–µ–Ω–æ:', '–¥–∞' if data.get('found') else '–Ω–µ—Ç'); print('–¢—ç–≥–∏:', ', '.join(data.get('russian_tags', [])) if data.get('found') else '–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç')" 2>/dev/null || echo "–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API"

# –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ –ø—Ä–∏–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ
list-photos:
	@echo "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏ /app/photos:"
	@docker exec simple_photo_tagger find /app/photos -type f \( -iname "*.jpg" -o -iname "*.jpeg" -o -iname "*.png" -o -iname "*.webp" \) | head -20 2>/dev/null || echo "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ –ø–∞–ø–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
	@echo ""
	@echo "–î–ª—è —Ç—ç–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:"
	@echo "  make tag-image FILE=/app/photos/filename.jpg"

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç—ç–≥–∞–º (—Ç–æ–ø –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö)
stats-tags:
	@echo "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω—ã–º —Ç—ç–≥–∞–º:"
	@curl -s "http://localhost:8000/stats" \
		| python3 -c "import sys, json; data=json.load(sys.stdin); print(f'–ü–æ–º–µ—á–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {data.get(\"total_tagged_images\", 0)}'); print(f'–í—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç—ç–≥–æ–≤: {data.get(\"total_available_tags\", 0)}')" 2>/dev/null || echo "API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

# –¢—ç–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ —Ç—ç–≥–∞–º–∏ (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: make tag-custom FILE=/app/photos/dog.jpg CUSTOM_TAGS='["dog","cat","car"]')
tag-custom:
	@if [ -z "$(FILE)" ] || [ -z "$(CUSTOM_TAGS)" ]; then \
		echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: make tag-custom FILE=/app/photos/file.jpg CUSTOM_TAGS='[\"dog\",\"cat\",\"car\"]'"; \
		echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Ç—ç–≥–∏ —Å–º–æ—Ç—Ä–∏—Ç–µ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"; \
		exit 1; \
	fi
	@echo "–¢—ç–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ $(FILE) —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ —Ç—ç–≥–∞–º–∏: $(CUSTOM_TAGS)"
	@curl -X POST "http://localhost:8000/tag/image" \
		-H "Content-Type: application/json" \
		-d "{\"image_path\": \"$(FILE)\", \"use_all_tags\": false, \"custom_tags\": $(CUSTOM_TAGS), \"top_k\": $(or $(TAGS),5)}" \
		| python3 -c "import sys, json; data=json.load(sys.stdin); print('–†–µ–∑—É–ª—å—Ç–∞—Ç:', ', '.join(data.get('russian_tags', [])))" 2>/dev/null || echo "–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞"

# –ù–û–í–´–ï –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
db-check:
	@echo "üîó –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î..."
	@curl -s http://localhost:8000/health | python3 -c "import sys, json; data=json.load(sys.stdin); db=data['database']; print(f'–°—Ç–∞—Ç—É—Å: {db[\"status\"]}'); print(f'–¢–∏–ø –ë–î: {db[\"connection_type\"]}'); print(f'–ó–∞–ø–∏—Å–µ–π: {db.get(\"total_records\", 0)}')" 2>/dev/null || echo "‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

db-stats:
	@echo "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ AI —Ç—ç–≥–∞–º..."
	@curl -s http://localhost:8000/stats | python3 -c "import sys, json; data=json.load(sys.stdin); print(f'–ü–æ–º–µ—á–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {data.get(\"total_tagged_images\", 0)}'); print(f'–¢–∞–±–ª–∏—Ü–∞: {data.get(\"table_name\", \"N/A\")}'); print(f'–í—Å–µ–≥–æ —Ç—ç–≥–æ–≤: {data.get(\"total_available_tags\", 0)}')" 2>/dev/null || echo "‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

db-health:
	@echo "üíä –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è..."
	@curl -s http://localhost:8000/health | python3 -m json.tool

# –ó–∞–π—Ç–∏ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
shell:
	@echo "üêö –ó–∞—Ö–æ–¥–∏–º –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä..."
	docker exec -it simple_photo_tagger /bin/bash

# –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∏–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞–ø–∫–∏
check-mounts:
	@echo "üìÇ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞–ø–∫–∏..."
	@echo "–ü–∞–ø–∫–∏ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ:"
	docker exec simple_photo_tagger ls -la /app/ 2>/dev/null || echo "‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω"
	@echo ""
	@echo "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ /app/photos:"
	docker exec simple_photo_tagger ls -la /app/photos/ 2>/dev/null || echo "‚ùå –ü–∞–ø–∫–∞ /app/photos –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"

# –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–±–µ–∑ –ë–î)
restart-app:
	@echo "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."
	docker-compose restart photo-tagger
	@sleep 5
	@make test

# –ë—ã—Å—Ç—Ä–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ (–ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫)
install:
	@echo "üöÄ –ë—ã—Å—Ç—Ä–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Simple Photo Tagger —Å —Ä—É—Å—Å–∫–∏–º–∏ —Ç—ç–≥–∞–º–∏..."
	@echo ""
	@echo "1. –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ docker-compose.yml - –¥–æ–±–∞–≤—å –ø—É—Ç–∏ –∫ —Å–≤–æ–∏–º —Ñ–æ—Ç–∫–∞–º!"
	@echo "2. –ó–∞—Ç–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: make build && make up"
	@echo "3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ: make test && make check-tags"
	@echo ""
	@echo "–ü—Ä–∏–º–µ—Ä –≤ docker-compose.yml:"
	@echo "volumes:"
	@echo "  - /home/user/Pictures:/app/photos:ro"
	@echo "  - /media/photos:/app/backup:ro"
	@echo ""
	@echo "üè∑Ô∏è –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ä—É—Å—Å–∫–æ–π –≤–µ—Ä—Å–∏–∏:"
	@echo "  ‚úÖ –ú–æ–¥–µ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –∞–Ω–≥–ª–∏–π—Å–∫–∏–º–∏ —Ç—ç–≥–∞–º–∏ (–ª—É—á—à–µ –æ–±—É—á–µ–Ω–∞)"
	@echo "  ‚úÖ –í –ë–î —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è —Ä—É—Å—Å–∫–∏–µ —Ç—ç–≥–∏"
	@echo "  ‚úÖ –û—Ç–¥–µ–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ ai_photo_tags (–Ω–µ –º–µ—à–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –¥–∞–Ω–Ω—ã–º)"
	@echo "  ‚úÖ –ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ —Ä—É—Å—Å–∫–∏–º —Ç—ç–≥–∞–º"
