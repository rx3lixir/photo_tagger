# api.py - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä—É—Å—Å–∫–∏—Ö —Ç—ç–≥–æ–≤
import asyncio
import os
import logging
from pathlib import Path
from typing import List, Optional
from contextlib import asynccontextmanager

from fastapi import FastAPI, HTTPException, BackgroundTasks
from pydantic import BaseModel

from tagger import CLIPTagger
from image_utils import load_image
from database import SafeDatabaseManager
from tag_translation import TAG_TRANSLATION_MAP, get_russian_tags, ENGLISH_TAGS

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
tagger: CLIPTagger
db_manager: SafeDatabaseManager

@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    global tagger, db_manager
    
    # Startup
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Simple Photo Tagger —Å —Ä—É—Å—Å–∫–∏–º–∏ —Ç—ç–≥–∞–º–∏...")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—ç–≥–≥–µ—Ä
        logger.info("ü§ñ –ó–∞–≥—Ä—É–∑–∫–∞ CLIP –º–æ–¥–µ–ª–∏...")
        tagger = CLIPTagger()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–ï–ó–û–ü–ê–°–ù–û–ï –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        logger.info("üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        db_manager = SafeDatabaseManager(table_name="ai_photo_tags")
        await db_manager.init_database()
        
        logger.info("‚úÖ API —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
        logger.info(f"üìù –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è {len(ENGLISH_TAGS)} —Ç—ç–≥–æ–≤ (–∞–Ω–≥–ª -> —Ä—É—Å)")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ API: {e}")
        raise
    
    yield
    
    # Shutdown
    logger.info("‚èπÔ∏è  –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Simple Photo Tagger...")
    await db_manager.close()

# –°–æ–∑–¥–∞–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(
    title="Simple Photo Tagger API (RUS)", 
    description="–ü—Ä–æ—Å—Ç–æ–π API –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç—ç–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Å —Ä—É—Å—Å–∫–∏–º–∏ —Ç—ç–≥–∞–º–∏",
    version="2.1.0-RUS",
    lifespan=lifespan
)

class TagImageRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –¥–ª—è —Ç—ç–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    image_path: str
    use_all_tags: Optional[bool] = True  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç—ç–≥–∏
    custom_tags: Optional[List[str]] = None  # –ö–∞—Å—Ç–æ–º–Ω—ã–µ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Ç—ç–≥–∏
    top_k: Optional[int] = 5

class TagDirectoryRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –¥–ª—è —Ç—ç–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
    directory_path: str
    use_all_tags: Optional[bool] = True
    custom_tags: Optional[List[str]] = None
    file_extensions: Optional[List[str]] = [".jpg", ".jpeg", ".png", ".webp"]
    top_k: Optional[int] = 5

class TagResult(BaseModel):
    """–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç—ç–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ä—É—Å—Å–∫–∏–º–∏ —Ç—ç–≥–∞–º–∏"""
    image_path: str
    russian_tags: List[str]  # –¢–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ —Ç—ç–≥–∏
    confidence_scores: List[float]  # –î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ –ë–î)
    error: Optional[str] = None

async def process_single_image(image_path: str, english_tags: List[str], top_k: int = 5) -> TagResult:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª
        if not os.path.exists(image_path):
            return TagResult(
                image_path=image_path, 
                russian_tags=[], 
                confidence_scores=[],
                error=f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}"
            )
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ —Ç—ç–≥–∏—Ä—É–µ–º
        image = load_image(image_path)
        
        # –¢—ç–≥–≥–∏—Ä—É–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ (–∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Ç—ç–≥–∏ –¥–ª—è –º–æ–¥–µ–ª–∏)
        loop = asyncio.get_event_loop()
        english_results = await loop.run_in_executor(
            None, 
            tagger.tag_image, 
            image, 
            english_tags,
            top_k
        )
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ä—É—Å—Å–∫–∏–µ —Ç—ç–≥–∏
        english_tags_only = [tag for tag, _ in english_results]
        confidence_scores = [conf for _, conf in english_results]
        russian_tags = get_russian_tags(english_tags_only)
        
        logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {image_path}, –Ω–∞–π–¥–µ–Ω–æ {len(russian_tags)} —Ç—ç–≥–æ–≤")
        logger.debug(f"üè∑Ô∏è  –¢—ç–≥–∏: {russian_tags}")
        
        return TagResult(
            image_path=image_path,
            russian_tags=russian_tags,
            confidence_scores=confidence_scores
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {image_path}: {e}")
        return TagResult(
            image_path=image_path,
            russian_tags=[],
            confidence_scores=[],
            error=str(e)
        )

async def save_results_to_db(results: List[TagResult]):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä—É—Å—Å–∫–∏—Ö —Ç—ç–≥–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö - –¢–û–õ–¨–ö–û –ø—É—Ç—å + —Ç—ç–≥–∏"""
    try:
        for result in results:
            if not result.error and result.russian_tags:  # –¢–æ–ª—å–∫–æ —É—Å–ø–µ—à–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                await db_manager.save_image_tags(
                    image_path=result.image_path,
                    russian_tags=result.russian_tags
                    # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ–º
                )
        
        successful_saves = len([r for r in results if not r.error and r.russian_tags])
        logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {successful_saves} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –ë–î")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {e}")

@app.post("/tag/image", response_model=TagResult)
async def tag_single_image(
    request: TagImageRequest,
    background_tasks: BackgroundTasks
):
    """–¢—ç–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Ä—É—Å—Å–∫–∏–º–∏ —Ç—ç–≥–∞–º–∏"""
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Ç—ç–≥–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
    if request.use_all_tags:
        english_tags_to_use = ENGLISH_TAGS  # –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç—ç–≥–∏
    elif request.custom_tags:
        english_tags_to_use = request.custom_tags
    else:
        english_tags_to_use = ENGLISH_TAGS[:50]  # –¢–æ–ø-50 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    top_k = min(request.top_k or 5, len(english_tags_to_use))
    
    logger.info(f"üè∑Ô∏è  –¢—ç–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ: {request.image_path}")
    logger.info(f"üìä –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è {len(english_tags_to_use)} —Ç—ç–≥–æ–≤, top_k={top_k}")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    result = await process_single_image(request.image_path, english_tags_to_use, top_k)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î –≤ —Ñ–æ–Ω–µ
    background_tasks.add_task(save_results_to_db, [result])
    
    return result

@app.post("/tag/directory")
async def tag_directory(
    request: TagDirectoryRequest,
    background_tasks: BackgroundTasks
):
    """–¢—ç–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å —Ä—É—Å—Å–∫–∏–º–∏ —Ç—ç–≥–∞–º–∏"""
    directory = Path(request.directory_path)
    if not directory.exists() or not directory.is_dir():
        raise HTTPException(
            status_code=400, 
            detail=f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {request.directory_path}"
        )
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Ç—ç–≥–∏
    if request.use_all_tags:
        english_tags_to_use = ENGLISH_TAGS
    elif request.custom_tags:
        english_tags_to_use = request.custom_tags
    else:
        english_tags_to_use = ENGLISH_TAGS[:50]
    
    top_k = min(request.top_k or 5, len(english_tags_to_use))
    
    # –ò—â–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    image_files: List[Path] = []
    for ext in request.file_extensions or [".jpg", ".jpeg", ".png", ".webp"]:
        image_files.extend(directory.glob(f"*{ext.lower()}"))
        image_files.extend(directory.glob(f"*{ext.upper()}"))
    
    logger.info(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {len(image_files)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ {request.directory_path}")
    
    if not image_files:
        raise HTTPException(
            status_code=404, 
            detail="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        )
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ —Ñ–æ–Ω–µ
    background_tasks.add_task(
        process_directory_background, 
        image_files, 
        english_tags_to_use,
        top_k
    )
    
    return {
        "message": f"üöÄ –ó–∞–ø—É—â–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ {len(image_files)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π",
        "directory": request.directory_path,
        "files_count": len(image_files),
        "tags_count": len(english_tags_to_use),
        "top_k": top_k
    }

async def process_directory_background(image_files: List[Path], english_tags: List[str], top_k: int = 5):
    """–§–æ–Ω–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
    logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É {len(image_files)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    
    results = []
    batch_size = 5  # –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–∞—á–∫–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    
    for i in range(0, len(image_files), batch_size):
        batch = image_files[i:i + batch_size]
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞—á–∫—É –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        batch_tasks = [
            process_single_image(str(img_path), english_tags, top_k) 
            for img_path in batch
        ]
        
        batch_results = await asyncio.gather(*batch_tasks)
        results.extend(batch_results)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—á–∫—É –≤ –ë–î
        await save_results_to_db(batch_results)
        
        processed_count = min(i + batch_size, len(image_files))
        logger.info(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed_count} –∏–∑ {len(image_files)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        
        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–∞—á–∫–∞–º–∏ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏
        await asyncio.sleep(0.5)
    
    successful_results = len([r for r in results if not r.error])
    logger.info(f"üéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –£—Å–ø–µ—à–Ω–æ: {successful_results}/{len(results)}")

@app.get("/search/{russian_tag}")
async def search_by_russian_tag(russian_tag: str):
    """–ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ —Ä—É—Å—Å–∫–æ–º—É —Ç—ç–≥—É"""
    try:
        results = await db_manager.search_by_tag(russian_tag)
        return {
            "tag": russian_tag,
            "found": len(results),
            "images": results
        }
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ —Ç—ç–≥—É {russian_tag}: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/tags/available")
async def get_available_tags():
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç—ç–≥–∏"""
    russian_tags = list(TAG_TRANSLATION_MAP.values())
    return {
        "total_tags": len(TAG_TRANSLATION_MAP),
        "russian_tags": russian_tags[:20],  # –ü–µ—Ä–≤—ã–µ 20 –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
        "all_russian_tags": russian_tags,
        "sample_mapping": dict(list(TAG_TRANSLATION_MAP.items())[:10])
    }

@app.get("/image/{image_path:path}/tags")
async def get_image_existing_tags(image_path: str):
    """–ü–æ–ª—É—á–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç—ç–≥–∏ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    try:
        tags = await db_manager.get_image_tags(image_path)
        if tags:
            return {
                "image_path": image_path,
                "found": True,
                "russian_tags": tags
            }
        else:
            return {
                "image_path": image_path,
                "found": False,
                "message": "–¢—ç–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            }
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—ç–≥–æ–≤ –¥–ª—è {image_path}: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/stats")
async def get_stats():
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä—É—Å—Å–∫–∏–º —Ç—ç–≥–∞–º"""
    try:
        stats = await db_manager.get_stats()
        return {
            **stats,
            "supported_languages": ["Russian", "English (for model)"],
            "total_available_tags": len(TAG_TRANSLATION_MAP)
        }
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API"""
    try:
        db_health = await db_manager.check_database_health()
        return {
            "status": "ok",
            "tagger_loaded": True,
            "database": db_health,
            "version": "2.1.0-RUS",
            "features": ["russian_tags", "safe_database", "separate_table"],
            "total_tags": len(TAG_TRANSLATION_MAP)
        }
    except Exception as e:
        return {
            "status": "error",
            "error": str(e),
            "version": "2.1.0-RUS"
        }
