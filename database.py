import json
import logging
import os
from typing import List, Tuple, Optional, Dict, Any
from datetime import datetime

# –ò–º–ø–æ—Ä—Ç—ã –¥—Ä–∞–π–≤–µ—Ä–æ–≤ –æ—Å—Ç–∞—é—Ç—Å—è —Ç–µ –∂–µ...
db_driver = None
db_type = None

try:
    import asyncpg
    db_driver = asyncpg
    db_type = "postgresql"
    logger = logging.getLogger(__name__)
    logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è PostgreSQL –¥—Ä–∞–π–≤–µ—Ä")
except ImportError:
    try:
        import aiomysql
        db_driver = aiomysql
        db_type = "mysql"
        logger = logging.getLogger(__name__)
        logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è MySQL/MariaDB –¥—Ä–∞–π–≤–µ—Ä")
    except ImportError:
        try:
            import aiosqlite
            db_driver = aiosqlite
            db_type = "sqlite"
            logger = logging.getLogger(__name__)
            logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è SQLite –¥—Ä–∞–π–≤–µ—Ä")
        except ImportError:
            raise ImportError("–ù–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –æ–¥–∏–Ω –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –¥—Ä–∞–π–≤–µ—Ä –ë–î")

logger = logging.getLogger(__name__)

class SafeDatabaseManager:
    """
    –ë–ï–ó–û–ü–ê–°–ù–´–ô –º–µ–Ω–µ–¥–∂–µ—Ä –ë–î –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –¥–ª—è AI —Ç—ç–≥–æ–≤ –∏ –Ω–µ —Ç—Ä–æ–≥–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ.
    """
    
    def __init__(self, table_name: str = "ai_photo_tags"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –û–¢–î–ï–õ–¨–ù–û–ô —Ç–∞–±–ª–∏—Ü–µ–π –¥–ª—è AI —Ç—ç–≥–æ–≤
        
        Args:
            table_name: –∏–º—è —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è AI —Ç—ç–≥–æ–≤ (–ù–ï –¢–†–û–ì–ê–ï–¢ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã!)
        """
        self.pool = None
        self.connection = None
        self.db_type = db_type
        self.table_name = table_name  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É!
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        self.db_config = self._get_db_config()
        
        logger.info(f"üîí –ë–ï–ó–û–ü–ê–°–ù–´–ô —Ä–µ–∂–∏–º: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ '{self.table_name}'")
        logger.info(f"–¢–∏–ø –ë–î: {self.db_type}")
    
    def _get_db_config(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ë–î –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        db_type_env = os.getenv('DB_TYPE', 'postgresql').lower()
        
        if db_type_env in ['postgres', 'postgresql'] and self.db_type == "postgresql":
            return {
                'host': os.getenv('DB_HOST', 'localhost'),
                'port': int(os.getenv('DB_PORT', '5432')),
                'user': os.getenv('DB_USER', 'postgres'),
                'password': os.getenv('DB_PASSWORD', 'postgres'),
                'database': os.getenv('DB_NAME', 'photo_archive')
            }
        elif db_type_env in ['mysql', 'mariadb'] and self.db_type == "mysql":
            return {
                'host': os.getenv('DB_HOST', 'localhost'),
                'port': int(os.getenv('DB_PORT', '3306')),
                'user': os.getenv('DB_USER', 'root'),
                'password': os.getenv('DB_PASSWORD', 'password'),
                'db': os.getenv('DB_NAME', 'photo_archive')
            }
        else:  # SQLite
            return {
                'database': os.getenv('DB_PATH', './photo_archive.db')
            }
    
    async def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î"""
        try:
            if self.db_type == "postgresql":
                self.pool = await asyncpg.create_pool(**self.db_config, min_size=1, max_size=10)
                logger.info("PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                
            elif self.db_type == "mysql":
                self.pool = await aiomysql.create_pool(**self.db_config, minsize=1, maxsize=10)
                logger.info("MySQL/MariaDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                
            elif self.db_type == "sqlite":
                self.connection = await aiosqlite.connect(self.db_config['database'])
                logger.info(f"SQLite –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {self.db_config['database']}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ë–ï–ó–û–ü–ê–°–ù–û
            await self._check_existing_tables()
            
            # –°–æ–∑–¥–∞–µ–º –¢–û–õ–¨–ö–û –Ω–∞—à—É —Ç–∞–±–ª–∏—Ü—É –¥–ª—è AI —Ç—ç–≥–æ–≤
            await self._create_ai_tags_table()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
            raise
    
    async def _check_existing_tables(self):
        """–ë–ï–ó–û–ü–ê–°–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü (–Ω–µ –º–µ–Ω—è–µ—Ç –∏—Ö!)"""
        try:
            if self.db_type == "postgresql":
                query = """
                SELECT table_name FROM information_schema.tables 
                WHERE table_schema = 'public' AND table_type = 'BASE TABLE'
                """
            elif self.db_type == "mysql":
                query = """
                SELECT table_name FROM information_schema.tables 
                WHERE table_schema = DATABASE()
                """
            else:  # SQLite
                query = """
                SELECT name FROM sqlite_master WHERE type='table'
                """
            
            existing_tables = await self._fetch_query(query)
            table_names = [row[0] for row in existing_tables] if existing_tables else []
            
            logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü: {len(table_names)}")
            logger.info(f"üîç –¢–∞–±–ª–∏—Ü—ã: {', '.join(table_names[:5])}{'...' if len(table_names) > 5 else ''}")
            
            if self.table_name in table_names:
                logger.info(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ AI —Ç—ç–≥–æ–≤ '{self.table_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            else:
                logger.info(f"üÜï –¢–∞–±–ª–∏—Ü–∞ AI —Ç—ç–≥–æ–≤ '{self.table_name}' –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞")
                
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã: {e}")
    
    async def _create_ai_tags_table(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ü–†–û–°–¢–û–ô —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è AI —Ç—ç–≥–æ–≤: —Ç–æ–ª—å–∫–æ –ø—É—Ç—å + —Ç—ç–≥–∏"""
        
        if self.db_type == "postgresql":
            create_table_query = f"""
            CREATE TABLE IF NOT EXISTS {self.table_name} (
                id SERIAL PRIMARY KEY,
                image_path VARCHAR(1000) NOT NULL UNIQUE,
                ai_tags JSONB NOT NULL
            );
            
            CREATE INDEX IF NOT EXISTS idx_{self.table_name}_path ON {self.table_name}(image_path);
            CREATE INDEX IF NOT EXISTS idx_{self.table_name}_tags ON {self.table_name} USING GIN(ai_tags);
            
            -- –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏
            COMMENT ON TABLE {self.table_name} IS 'AI-generated Russian tags from CLIP model';
            """
            
        elif self.db_type == "mysql":
            create_table_query = f"""
            CREATE TABLE IF NOT EXISTS {self.table_name} (
                id INT AUTO_INCREMENT PRIMARY KEY,
                image_path VARCHAR(1000) NOT NULL UNIQUE,
                ai_tags JSON NOT NULL
            );
            
            CREATE INDEX IF NOT EXISTS idx_{self.table_name}_path ON {self.table_name}(image_path);
            """
            
        else:  # SQLite
            create_table_query = f"""
            CREATE TABLE IF NOT EXISTS {self.table_name} (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                image_path TEXT NOT NULL UNIQUE,
                ai_tags TEXT NOT NULL
            );
            
            CREATE INDEX IF NOT EXISTS idx_{self.table_name}_path ON {self.table_name}(image_path);
            """
        
        await self._execute_query(create_table_query)
        logger.info(f"‚úÖ –ü—Ä–æ—Å—Ç–∞—è —Ç–∞–±–ª–∏—Ü–∞ AI —Ç—ç–≥–æ–≤ '{self.table_name}' —Å–æ–∑–¥–∞–Ω–∞/–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞")
    
    async def _execute_query(self, query: str, *args):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤"""
        if self.db_type == "postgresql":
            async with self.pool.acquire() as connection:
                return await connection.execute(query, *args)
                
        elif self.db_type == "mysql":
            async with self.pool.acquire() as connection:
                async with connection.cursor() as cursor:
                    await cursor.execute(query, args)
                    await connection.commit()
                    
        else:  # SQLite
            await self.connection.execute(query, args)
            await self.connection.commit()
    
    async def _fetch_query(self, query: str, *args):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SELECT –∑–∞–ø—Ä–æ—Å–æ–≤"""
        if self.db_type == "postgresql":
            async with self.pool.acquire() as connection:
                return await connection.fetch(query, *args)
                
        elif self.db_type == "mysql":
            async with self.pool.acquire() as connection:
                async with connection.cursor() as cursor:
                    await cursor.execute(query, args)
                    return await cursor.fetchall()
                    
        else:  # SQLite
            cursor = await self.connection.execute(query, args)
            return await cursor.fetchall()
    
    async def save_image_tags(self, image_path: str, russian_tags: List[str]):
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä—É—Å—Å–∫–∏—Ö AI —Ç—ç–≥–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è - –¢–û–õ–¨–ö–û –ø—É—Ç—å + —Ç—ç–≥–∏
        
        Args:
            image_path: –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
            russian_tags: —Å–ø–∏—Å–æ–∫ —Ä—É—Å—Å–∫–∏—Ö —Ç—ç–≥–æ–≤
        """
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ - —Ç–æ–ª—å–∫–æ —Ç—ç–≥–∏
            tags_json = json.dumps(russian_tags, ensure_ascii=False)
            
            if self.db_type == "postgresql":
                query = f"""
                INSERT INTO {self.table_name} (image_path, ai_tags)
                VALUES ($1, $2)
                ON CONFLICT (image_path) 
                DO UPDATE SET ai_tags = EXCLUDED.ai_tags
                """
                await self._execute_query(query, image_path, tags_json)
                
            elif self.db_type == "mysql":
                query = f"""
                INSERT INTO {self.table_name} (image_path, ai_tags)
                VALUES (%s, %s)
                ON DUPLICATE KEY UPDATE ai_tags = VALUES(ai_tags)
                """
                await self._execute_query(query, image_path, tags_json)
                
            else:  # SQLite
                query = f"""
                INSERT OR REPLACE INTO {self.table_name} (image_path, ai_tags)
                VALUES (?, ?)
                """
                await self._execute_query(query, image_path, tags_json)
            
            logger.debug(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã AI —Ç—ç–≥–∏ –¥–ª—è {image_path}: {russian_tags}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—ç–≥–æ–≤ –¥–ª—è {image_path}: {e}")
            raise
    
    async def get_image_tags(self, image_path: str) -> Optional[List[str]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ AI —Ç—ç–≥–æ–≤ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            query = f"""
            SELECT ai_tags
            FROM {self.table_name} 
            WHERE image_path = {'$1' if self.db_type == 'postgresql' else '?' if self.db_type == 'sqlite' else '%s'}
            """
            
            result = await self._fetch_query(query, image_path)
            
            if result:
                return json.loads(result[0][0])
            return None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—ç–≥–æ–≤ –¥–ª—è {image_path}: {e}")
            return None
    
    async def search_by_tag(self, russian_tag: str) -> List[Dict]:
        """–ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ —Ä—É—Å—Å–∫–æ–º—É —Ç—ç–≥—É"""
        try:
            if self.db_type == "postgresql":
                query = f"""
                SELECT image_path, ai_tags 
                FROM {self.table_name} 
                WHERE ai_tags @> $1::jsonb
                """
                tag_json = json.dumps([russian_tag], ensure_ascii=False)
                
            elif self.db_type == "mysql":
                query = f"""
                SELECT image_path, ai_tags 
                FROM {self.table_name} 
                WHERE JSON_CONTAINS(ai_tags, %s)
                """
                tag_json = json.dumps([russian_tag], ensure_ascii=False)
                
            else:  # SQLite
                query = f"""
                SELECT image_path, ai_tags 
                FROM {self.table_name} 
                WHERE ai_tags LIKE ?
                """
                tag_json = f'%"{russian_tag}"%'
            
            results = await self._fetch_query(query, tag_json)
            
            return [
                {
                    'image_path': row[0],
                    'tags': json.loads(row[1])
                }
                for row in results
            ]
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ —Ç—ç–≥—É {russian_tag}: {e}")
            return []
    
    async def get_stats(self) -> Dict:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ AI —Ç—ç–≥–∞–º"""
        try:
            count_query = f"SELECT COUNT(*) FROM {self.table_name}"
            count_result = await self._fetch_query(count_query)
            total_images = count_result[0][0] if count_result else 0
            
            return {
                'total_tagged_images': total_images,
                'table_name': self.table_name
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {'error': str(e)}
    
    async def check_database_health(self) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î"""
        try:
            # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            test_query = f"SELECT COUNT(*) FROM {self.table_name}"
            result = await self._fetch_query(test_query)
            
            return {
                'status': 'healthy',
                'connection_type': self.db_type,
                'table_exists': True,
                'total_records': result[0][0] if result else 0
            }
            
        except Exception as e:
            logger.error(f"‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –ë–î: {e}")
            return {
                'status': 'unhealthy',
                'error': str(e),
                'connection_type': self.db_type
            }
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        try:
            if self.db_type in ["postgresql", "mysql"] and self.pool:
                self.pool.close()
                await self.pool.wait_closed()
            elif self.db_type == "sqlite" and self.connection:
                await self.connection.close()
                
            logger.info("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –∑–∞–∫—Ä—ã—Ç–æ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")

# –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
DatabaseManager = SafeDatabaseManager
